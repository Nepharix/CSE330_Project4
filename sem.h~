#include "threads.h"

typedef struct Semaphore   {
//Method Description: A value field and a queue of TCBs.
//Queue of TCBs here
    int value;
    struct queue * TCB_queue;
}Semaphore;

void InitSem(Semaphore * semaphore, int value)   {
/*Method Description: Initializes the value field with the specified value.*/
    semaphore->TCB_queue = (struct queue*) malloc(sizeof(struct queue));
    InitQueue(&(semaphore->TCB_queue));
    semaphore->value = value;
}

void P(Semaphore * semaphore) {
/*Method Description: The P routine decrements the semaphore, and if the value is less than zero then 
blocks the thread in the queue associated with the semaphore 
(Curr_thread get added to semaphore queue and a new thread 
is selected from ReadyQ and put in Curr_Thread â€“ and then swapcontext.) */
    struct TCB_t * t;

    semaphore->value--;
    if(semaphore->value < 0)
    {
        t = DelQueue(&RunQ);
        AddQueue(&(semaphore->TCB_queue), t);
        swapcontext(&(t->context), &(RunQ->context));
    }
}

void V(Semaphore * semaphore) {
/* Method Description: The V routine increments the semaphore, and if the value is 0 or negative, 
then takes a PCB out of the semaphore queue and puts it into the ReadyQ queue. 
Note: The V routine also "yields" to the next runnable thread. //this is important.*/

    struct TCB_t * t;

    semaphore->value++;
    if(semaphore->value <= 0)
    {
        t = delQueue(semaphore->TCB_queue);
        AddQueue(&RunQ, t);
    }
    yield();
}


